description: >
  Builds the image and push it to GCR
parameters:
    merge-trigger-branch:
        type: string
        default: a-branch-that-shall-never-exist
    merge-destination-branch:
        type: string
        default: a-branch-that-shall-never-exist
    fingerprints:
        type: string
    project-name:
        type: string
    git-branch:
        type: string
    build-id:
        type: string
steps:
    - add_ssh_keys:
          fingerprints:
              - parameters.fingerprints
    - checkout
    - run:
          name: Tagging release
          command: |
              npm install -g \
              semantic-release@17
              if [[ -f package.json ]];
              then
                npx semantic-release
              else
                npx semantic-release --plugins "@semantic-release/commit-analyzer, @semantic-release/release-notes-generator, @semantic-release/github"
              fi
    - run:
          command: |
                if [[ -f .npmrc ]];
                then
                    cp .npmrc ~/
                    echo -e "\n//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN\n//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
                else
                    echo -e "@tactileentertainment:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN\n//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
                fi
    - run:
          name: Build GCP Docker Image
          command: |
              npm install -g $CI_CD_TOOLS_PACKAGE
              npx build-docker-image --name << parameters.project-name >> --extra-tag $EXTRA_TAG --build-id << parameters.build-id >>
              source $BASH_ENV
    - when:
          condition:
              equal: [ << parameters.git-branch >>, << parameters.merge-trigger-branch >> ]
          steps:
              - run:
                    name: Merge << parameters.merge-trigger-branch >> to << parameters.merge-destination-branch >>
                    command: |
                        git config --global user.email $GIT_EMAIL
                        git config --global user.name "$GIT_USER"
                        git fetch --all
                        git checkout << parameters.merge-destination-branch >>
                        git merge origin << parameters.merge-trigger-branch >>
                        git push origin << parameters.merge-destination-branch >>
                        git checkout << parameters.merge-trigger-branch >>
